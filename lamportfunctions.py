"""
@ngklingler
lamportfunctions.py: Generates Lamport keys and signatures with a
group of functions
"""


import secrets
import hashlib


def hashEncode(hexString):
    """Helper function to encode and hash hexString and return a hexString"""
    return hashlib.sha256(hexString.encode()).hexdigest()


def genKeyPair():
    """Generates tuple of arrays of tuples, 1st tuple is secKey with array
    of tuple pairs, 2nd is pubKey array of tuple pairs"""
    # initialize secKey and pubKey variables
    secKey = []
    pubKey = []
    # generate a private key array, store int as hex string, gen pubKey array
    # hashing encoded hex strings and storing as hex digest string
    for counter in range(256):
        secKey.append((hex(secrets.randbits(256))[2:],
                       hex(secrets.randbits(256))[2:]))
        pubKey.append((hashEncode(secKey[counter][0]),
                       hashEncode(secKey[counter][1])))
    return (secKey, pubKey)


def hexToBin(hexString):
    """takes a hex string, converts it to a binary string, trims the '0b'
    prefix, and pads it with leading zeroes to ensure a 256 bit length"""
    binaryString = bin(int(hexString, 16))[2:]
    if len(binaryString) < 256:
        prefix = "0" * (256 - len(binaryString))
        binaryString = prefix + binaryString
    return binaryString


def signMessageHash(messageHash, keyPair):
    """Signs a message's hash using the provided keypair, first argument is
    the hash of the message second is keypair array from genKeyPair()"""
    binString = hexToBin(messageHash)
    signatureArray = []
    secKey = keyPair[0]
    for i in range(len(binString)):
        bit = int(binString[i])
        signatureArray.append(secKey[i][bit])
    return tuple(signatureArray)


def verifySignature(messageHash, signatureArray, pubKey):
    """Takes three args: message, signature as generated by signMessage, and a
    public key, returns True/False as to whether signature is valid for public
    key"""
    binString = hexToBin(messageHash)
    hashOfSig = []
    verificationArray = []
    for i in range(len(signatureArray)):
        hashOfSig.append(hashEncode(signatureArray[i]))
    for i in range(len(binString)):
        bit = int(binString[i])
        verificationArray.append(pubKey[i][bit])
    if verificationArray == hashOfSig:
        return True
    else:
        return False
